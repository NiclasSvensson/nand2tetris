// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array string;
    field int len, maxLen;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
      if (maxLength = 0){
        let maxLength = 1;
      }
      let len = 0;
      let maxLen = maxLength;
      let string = Array.new(maxLength);
      return this;
    }

    /** Disposes this string. */
    method void dispose() {
      do string.dispose();
      return;
    }

    /** Returns the current length of this string. */
    method int length() {
      return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
      return string[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
      let string[j] = c;
      return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
      if (len < maxLen){
        let string[len] = c;
        let len = len + 1;
      }
      return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
      if (len > 0){
        let len = len - 1;
        //let string[len] = 0;
      }
      return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
      var boolean neg;
      var int i, d, value;
      if ((string[i] = 45) & (len > 1)) {
        let i = 1;
        let neg = true;
      } else {
        let i = 0;
        let neg = false;
      }
      let value = 0;
      while ((i < len) & (string[i] > 47 & string[i] < 58)) {
        let d = string[i] - 48;
        let value = value * 10 + d;
        let i = i + 1;
      }
      if (neg){
        return -value;
      } else {
        return value;
      }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
      var int lastDigit, c;
      let lastDigit = val - (Math.divide(val, 10) * 10);
      let c = Math.abs(lastDigit) + 48;
      if (Math.abs(val) > 9){
        do setInt(val/10);
      } else {
        let len = 0;
        if (val < 0){
          do appendChar(45);
        }
      }
      do appendChar(c);
      return;
    }

    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }
}
