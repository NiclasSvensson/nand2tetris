// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {
    static Array twoToThe;
    static boolean isBlack;
    static int start, end;

    /** Initializes the Screen. */
    function void init() {
      let isBlack = true;
      let start = 16348;
      let end = 24576;

      let twoToThe = Array.new(16);
      let twoToThe[0] = 1;
      let twoToThe[1] = 2;
      let twoToThe[2] = 4;
      let twoToThe[3] = 8;
      let twoToThe[4] = 16;
      let twoToThe[5] = 32;
      let twoToThe[6] = 64;
      let twoToThe[7] = 128;
      let twoToThe[8] = 256;
      let twoToThe[9] = 512;
      let twoToThe[10] = 1024;
      let twoToThe[11] = 2048;
      let twoToThe[12] = 4096;
      let twoToThe[13] = 8192;
      let twoToThe[14] = 16384;
      let twoToThe[15] = 16384+16384;

      return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
      var int i;
      let i = start;
      while (i < end) {
        do Memory.poke(i, 0);
        let i = i + 1;
      }
      return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
      if (b) {
        let isBlack = true;
      } else {
        let isBlack = false;
      }
      return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
      var int address, bit, pokeByte, peekByte;
      let address = 16384 + (y*32) + (x/16);
      let bit = x - ((x/16)*16);
      let peekByte = Memory.peek(address);
      let pokeByte = twoToThe[bit];
      if (isBlack) {
        do Memory.poke(address, pokeByte | peekByte);
      } else {
        do Memory.poke(address, ~pokeByte & peekByte);
      }

      return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
      var int a, b, dx, dy, xd, yd, diff, temp;
      var boolean ydirr, xdirr;

      let xdirr = true;
      let ydirr = true;
      if (x2 < x1){
        let temp = x1;
        let x1 = x2;
        let x2 = temp;
        let xdirr = false;
      }
      if (y2 < y1){
        let temp = y1;
        let y1 = y2;
        let y2 = temp;
        let ydirr = false;
      }
      let a = 0;
      let b = 0;
      let dx = x2-x1;
      let dy = y2-y1;

      if (dy = 0){
        while ((a < dx) | (a = dx)) {
          do Screen.drawPixel(x1+a, y1+b);
          let a = a + 1;
        }
      }

      while (((a < dx) | (a = dx)) & ((b < dy) | (b = dy))) {
        if (xdirr){
          let xd = x1 + a;
        } else {
          let xd = x1 - a + dx;
        }
        if (ydirr){
          let yd = y1 + b;
        } else {
          let yd = y1 - b + dy;
        }
        do Screen.drawPixel(xd, yd);
        if ((a*dy) < (b*dx)){
          let a = a + 1;
        } else {
          let b = b + 1;
        }
      }

      return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
      var int i;
      let i = y1;

      while ((i < y2) | (i = y2)) {
        do Screen.drawLine(x1, i, x2, i);
        let i = i + 1;
      }
      return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
      var int dy, x1, x2, yl, hypt;

      if (r > 181) { return; }
      let dy = -r;
      while ((dy < r) | (dy = r)) {
        let hypt = Math.sqrt((r*r)-(dy*dy));
        let x1 = x - hypt;
        let x2 = x + hypt;
        let yl = y + dy;
        do Screen.drawLine(x1, yl, x2, yl);
        let dy = dy + 1;
    }
      return;
    }
}
